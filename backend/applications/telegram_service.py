import requests
import logging
from django.conf import settings
from django.utils import timezone
from typing import Optional, Dict, Any
from .models import Application
from core.json_utils import safe_json_response

logger = logging.getLogger(__name__)


class TelegramService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
    """
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: –ø—É–±–ª–∏—á–Ω—ã–π (–¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π) –∏ –ª–æ–≥-–∫–∞–Ω–∞–ª (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤)
        self.public_chat_id = getattr(settings, 'TELEGRAM_PUBLIC_CHAT_ID', None)
        self.log_chat_id = getattr(settings, 'TELEGRAM_LOG_CHAT_ID', None)
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def send_message(self, text: str, parse_mode: str = "HTML", chat_id: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Telegram API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        target_chat_id = chat_id or self.public_chat_id
        if not self.bot_token or not target_chat_id:
            logger.error("Telegram bot token –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return None
        
        url = f"{self.base_url}/sendMessage"
        
        data = {
            'chat_id': target_chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            
            result = safe_json_response(response)
            if result and result.get('ok'):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram. Chat ID: {target_chat_id}, Message ID: {result['result']['message_id']}")
                return result
            else:
                error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç'
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_msg}")
                return None
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return None
    
    def send_application_notification(self, application) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ Telegram
        
        Args:
            application: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ Application
            
        Returns:
            Message ID –∏–∑ Telegram –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_application_message(application)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
        result = self.send_message(message, chat_id=self.public_chat_id)
        if result and result.get('ok'):
            return str(result['result']['message_id'])
        return None

    def send_log(self, text: str, parse_mode: str = "HTML") -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª Telegram
        """
        return self.send_message(text=text, parse_mode=parse_mode, chat_id=self.log_chat_id)
    
    def _format_application_message(self, application) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            application: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ Application
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        applicant_name = f"{application.first_name} {application.last_name}"
        applicant_type_emoji = {
            Application.ApplicantType.STUDENT: 'üéì',
            Application.ApplicantType.TEACHER: 'üë®‚Äçüè´',
            Application.ApplicantType.PARENT: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'
        }
        emoji = applicant_type_emoji.get(application.applicant_type, 'üë§')
        
        message = f"""
{emoji} <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ</b>

üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {applicant_name}
üìã <b>–¢–∏–ø:</b> {application.get_applicant_type_display()}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {application.phone}
üìß <b>Email:</b> {application.email}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
        if application.applicant_type == Application.ApplicantType.STUDENT:
            if application.grade:
                message += f"üéØ <b>–ö–ª–∞—Å—Å:</b> {application.grade}\n"
            if application.parent_first_name and application.parent_last_name:
                message += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–†–æ–¥–∏—Ç–µ–ª—å:</b> {application.parent_first_name} {application.parent_last_name}\n"
        
        elif application.applicant_type == Application.ApplicantType.TEACHER:
            if application.subject:
                message += f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {application.subject}\n"
        
        message += f"\nüìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {application.created_at.strftime('%d.%m.%Y –≤ %H:%M')}"
        
        if application.motivation:
            message += f"\n\nüéØ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è/–¶–µ–ª—å:</b>\n{application.motivation}"
        
        if application.experience:
            message += f"\n\nüíº <b>–û–ø—ã—Ç:</b>\n{application.experience}"
        
        message += f"\n\nüÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{application.id}"
        
        return message
    
    def send_status_update(self, application, old_status: str, new_status: str) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        
        Args:
            application: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ Application
            old_status: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            
        Returns:
            Message ID –∏–∑ Telegram –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        status_emojis = {
            'new': 'üÜï',
            'processing': '‚è≥',
            'approved': '‚úÖ',
            'rejected': '‚ùå',
            'completed': 'üéâ'
        }
        
        status_names = {
            'new': '–ù–æ–≤–∞—è',
            'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
        emoji = status_emojis.get(new_status, 'üìù')
        status_name = status_names.get(new_status, new_status)
        
        applicant_name = f"{application.first_name} {application.last_name}"
        
        message = f"""
{emoji} <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏</b>

üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {applicant_name}
üìã <b>–¢–∏–ø:</b> {application.get_applicant_type_display()}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {application.phone}
üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{application.id}

üìä <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b> {status_name}
‚è∞ <b>–í—Ä–µ–º—è:</b> {timezone.now().strftime('%d.%m.%Y –≤ %H:%M')}
"""
        
        if application.notes:
            message += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {application.notes}"
        
        return self.send_message(message)
    
    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.bot_token:
            logger.error("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        url = f"{self.base_url}/getMe"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            result = safe_json_response(response)
            if result and result.get('ok'):
                bot_info = result['result']
                logger.info(f"Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'Unknown')}")
                return True
            else:
                error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç'
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {error_msg}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService()


class TelegramNotificationService:
    """
    Backward-compatible —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ä—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (requests.post) –∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ –∏ TelegramService
    –∏–∑ —ç—Ç–æ–≥–æ –∂–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –º–æ–∫–∏ –≤–∏–¥–∞
    `@patch('applications.telegram_service.requests.post')` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∏ –≤—ã–∑–æ–≤—ã.
    """

    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"

    def _send_message(self, chat_id: str, text: str, parse_mode: str = "HTML"):
        if not self.bot_token or not chat_id:
            logger.error("Telegram bot token –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return None

        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }

        try:
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()

            result = safe_json_response(response)
            if result and result.get('ok'):
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram. Chat ID: {chat_id}, Message ID: {result['result']['message_id']}"
                )
                return result
            else:
                error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç'
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_msg}")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return None

    def _format_credentials_message(self, username: str, password: str) -> str:
        return "\n".join([
            "‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            f"üë§ –õ–æ–≥–∏–Ω: <code>{username}</code>",
            f"üîê –ü–∞—Ä–æ–ª—å: <code>{password}</code>",
        ])

    def send_application_approved_notification(self, application: Application, credentials):
        """
        –ú–µ—Ç–æ–¥, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∏—Ç–µ–ª—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –µ–≥–æ telegram_id.
        """
        chat_id = getattr(application, 'telegram_id', '') or getattr(application, 'parent_telegram_id', '')
        if not chat_id:
            # Fallback –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö –±–µ–∑ telegram_id
            chat_id = getattr(settings, 'TELEGRAM_PUBLIC_CHAT_ID', None) or getattr(settings, 'TELEGRAM_CHAT_ID', None)

        message = self._format_credentials_message(
            username=getattr(credentials, 'get', lambda k, d=None: None)('username') if hasattr(credentials, 'get') else credentials['username'],
            password=getattr(credentials, 'get', lambda k, d=None: None)('password') if hasattr(credentials, 'get') else credentials['password'],
        )
        return self._send_message(chat_id=chat_id, text=message)
