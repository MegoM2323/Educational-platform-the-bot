from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import Notification, NotificationTemplate, NotificationSettings, NotificationQueue


@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    list_display = [
        'recipient', 'title_short', 'type_badge', 'priority_badge', 
        'is_read_badge', 'is_sent_badge', 'created_at'
    ]
    list_filter = ['type', 'priority', 'is_read', 'is_sent', 'created_at']
    search_fields = ['title', 'message', 'recipient__username', 'recipient__email']
    readonly_fields = ['created_at', 'read_at', 'sent_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('recipient', 'title', 'message', 'type', 'priority')
        }),
        ('–°—Ç–∞—Ç—É—Å', {
            'fields': ('is_read', 'is_sent', 'read_at', 'sent_at')
        }),
        ('–°–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã', {
            'fields': ('related_object_type', 'related_object_id'),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('data',),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def title_short(self, obj):
        return obj.title[:50] + "..." if len(obj.title) > 50 else obj.title
    title_short.short_description = '–ó–∞–≥–æ–ª–æ–≤–æ–∫'
    
    def type_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            Notification.Type.ASSIGNMENT_NEW: 'blue',
            Notification.Type.ASSIGNMENT_DUE: 'orange',
            Notification.Type.ASSIGNMENT_GRADED: 'green',
            Notification.Type.MATERIAL_NEW: 'purple',
            Notification.Type.MESSAGE_NEW: 'cyan',
            Notification.Type.REPORT_READY: 'brown',
            Notification.Type.PAYMENT_SUCCESS: 'green',
            Notification.Type.PAYMENT_FAILED: 'red',
            Notification.Type.SYSTEM: 'gray',
            Notification.Type.REMINDER: 'yellow'
        }
        
        emojis = {
            Notification.Type.ASSIGNMENT_NEW: 'üìù',
            Notification.Type.ASSIGNMENT_DUE: '‚è∞',
            Notification.Type.ASSIGNMENT_GRADED: '‚úÖ',
            Notification.Type.MATERIAL_NEW: 'üìö',
            Notification.Type.MESSAGE_NEW: 'üí¨',
            Notification.Type.REPORT_READY: 'üìä',
            Notification.Type.PAYMENT_SUCCESS: 'üí∞',
            Notification.Type.PAYMENT_FAILED: '‚ùå',
            Notification.Type.SYSTEM: '‚öôÔ∏è',
            Notification.Type.REMINDER: 'üîî'
        }
        
        color = colors.get(obj.type, 'gray')
        emoji = emojis.get(obj.type, 'üì¢')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_type_display()}"
        )
    type_badge.short_description = '–¢–∏–ø'
    
    def priority_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            Notification.Priority.LOW: 'gray',
            Notification.Priority.NORMAL: 'blue',
            Notification.Priority.HIGH: 'orange',
            Notification.Priority.URGENT: 'red'
        }
        
        emojis = {
            Notification.Priority.LOW: 'üîΩ',
            Notification.Priority.NORMAL: '‚û°Ô∏è',
            Notification.Priority.HIGH: 'üîº',
            Notification.Priority.URGENT: 'üö®'
        }
        
        color = colors.get(obj.priority, 'blue')
        emoji = emojis.get(obj.priority, '‚û°Ô∏è')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_priority_display()}"
        )
    priority_badge.short_description = '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
    
    def is_read_badge(self, obj):
        if obj.is_read:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ</span>'
            )
        else:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üì¨ –ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ</span>'
            )
    is_read_badge.short_description = '–°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è'
    
    def is_sent_badge(self, obj):
        if obj.is_sent:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>'
            )
        else:
            return format_html(
                '<span style="background-color: orange; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚è≥ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</span>'
            )
    is_sent_badge.short_description = '–°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏'


@admin.register(NotificationTemplate)
class NotificationTemplateAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    list_display = [
        'name', 'type_badge', 'is_active_badge', 'created_at'
    ]
    list_filter = ['type', 'is_active', 'created_at']
    search_fields = ['name', 'description', 'title_template']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'type', 'is_active')
        }),
        ('–®–∞–±–ª–æ–Ω—ã', {
            'fields': ('title_template', 'message_template')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def type_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            Notification.Type.ASSIGNMENT_NEW: 'blue',
            Notification.Type.ASSIGNMENT_DUE: 'orange',
            Notification.Type.ASSIGNMENT_GRADED: 'green',
            Notification.Type.MATERIAL_NEW: 'purple',
            Notification.Type.MESSAGE_NEW: 'cyan',
            Notification.Type.REPORT_READY: 'brown',
            Notification.Type.PAYMENT_SUCCESS: 'green',
            Notification.Type.PAYMENT_FAILED: 'red',
            Notification.Type.SYSTEM: 'gray',
            Notification.Type.REMINDER: 'yellow'
        }
        
        emojis = {
            Notification.Type.ASSIGNMENT_NEW: 'üìù',
            Notification.Type.ASSIGNMENT_DUE: '‚è∞',
            Notification.Type.ASSIGNMENT_GRADED: '‚úÖ',
            Notification.Type.MATERIAL_NEW: 'üìö',
            Notification.Type.MESSAGE_NEW: 'üí¨',
            Notification.Type.REPORT_READY: 'üìä',
            Notification.Type.PAYMENT_SUCCESS: 'üí∞',
            Notification.Type.PAYMENT_FAILED: '‚ùå',
            Notification.Type.SYSTEM: '‚öôÔ∏è',
            Notification.Type.REMINDER: 'üîî'
        }
        
        color = colors.get(obj.type, 'gray')
        emoji = emojis.get(obj.type, 'üì¢')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_type_display()}"
        )
    type_badge.short_description = '–¢–∏–ø'
    
    def is_active_badge(self, obj):
        if obj.is_active:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>'
            )
    is_active_badge.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(NotificationSettings)
class NotificationSettingsAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    list_display = [
        'user', 'email_notifications_badge', 'push_notifications_badge', 
        'sms_notifications_badge'
    ]
    search_fields = ['user__username', 'user__email']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
            'fields': ('user',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
            'fields': (
                'assignment_notifications', 'material_notifications', 
                'message_notifications', 'report_notifications', 
                'payment_notifications', 'system_notifications'
            )
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏', {
            'fields': ('email_notifications', 'push_notifications', 'sms_notifications')
        }),
        ('–í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã', {
            'fields': ('quiet_hours_start', 'quiet_hours_end'),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def email_notifications_badge(self, obj):
        if obj.email_notifications:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üìß –í–∫–ª—é—á–µ–Ω—ã</span>'
            )
        else:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üìß –í—ã–∫–ª—é—á–µ–Ω—ã</span>'
            )
    email_notifications_badge.short_description = 'Email'
    
    def push_notifications_badge(self, obj):
        if obj.push_notifications:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üîî –í–∫–ª—é—á–µ–Ω—ã</span>'
            )
        else:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üîî –í—ã–∫–ª—é—á–µ–Ω—ã</span>'
            )
    push_notifications_badge.short_description = 'Push'
    
    def sms_notifications_badge(self, obj):
        if obj.sms_notifications:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üì± –í–∫–ª—é—á–µ–Ω—ã</span>'
            )
        else:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üì± –í—ã–∫–ª—é—á–µ–Ω—ã</span>'
            )
    sms_notifications_badge.short_description = 'SMS'


@admin.register(NotificationQueue)
class NotificationQueueAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    list_display = [
        'notification', 'channel_badge', 'status_badge', 'attempts_display', 
        'scheduled_at', 'created_at'
    ]
    list_filter = ['status', 'channel', 'created_at', 'scheduled_at']
    search_fields = ['notification__title', 'notification__recipient__username']
    readonly_fields = ['created_at', 'processed_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('notification', 'channel', 'status', 'scheduled_at')
        }),
        ('–û–±—Ä–∞–±–æ—Ç–∫–∞', {
            'fields': ('forms', 'max_attempts', 'error_message', 'processed_at')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at',),
            'classes': ('collapse',)
        }),
    )
    
    def channel_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            'email': 'blue',
            'push': 'green',
            'sms': 'orange',
            'in_app': 'purple'
        }
        
        emojis = {
            'email': 'üìß',
            'push': 'üîî',
            'sms': 'üì±',
            'in_app': 'üì±'
        }
        
        color = colors.get(obj.channel, 'gray')
        emoji = emojis.get(obj.channel, 'üì§')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.channel.upper()}"
        )
    channel_badge.short_description = '–ö–∞–Ω–∞–ª'
    
    def status_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            NotificationQueue.Status.PENDING: 'blue',
            NotificationQueue.Status.PROCESSING: 'orange',
            NotificationQueue.Status.SENT: 'green',
            NotificationQueue.Status.FAILED: 'red',
            NotificationQueue.Status.CANCELLED: 'gray'
        }
        
        emojis = {
            NotificationQueue.Status.PENDING: '‚è≥',
            NotificationQueue.Status.PROCESSING: '‚öôÔ∏è',
            NotificationQueue.Status.SENT: '‚úÖ',
            NotificationQueue.Status.FAILED: '‚ùå',
            NotificationQueue.Status.CANCELLED: 'üö´'
        }
        
        color = colors.get(obj.status, 'gray')
        emoji = emojis.get(obj.status, 'üì§')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_status_display()}"
        )
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def attempts_display(self, obj):
        if obj.attempts >= obj.max_attempts:
            color = 'red'
        elif obj.attempts > 0:
            color = 'orange'
        else:
            color = 'green'
        
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}/{}</span>',
            color,
            obj.attempts,
            obj.max_attempts
        )
    attempts_display.short_description = '–ü–æ–ø—ã—Ç–∫–∏'