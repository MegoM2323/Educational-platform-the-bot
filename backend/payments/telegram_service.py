import requests
import logging
from django.conf import settings
from core.json_utils import safe_json_response

logger = logging.getLogger(__name__)

class TelegramNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        # –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
        self.chat_id = getattr(settings, 'TELEGRAM_LOG_CHAT_ID', None)
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
    
    def send_payment_notification(self, payment):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        if not self.bot_token or not self.chat_id:
            logger.warning("Telegram bot token or TELEGRAM_LOG_CHAT_ID not configured")
            return False
        
        try:
            message = self._format_payment_message(payment)
            return self._send_message(message)
        except Exception as e:
            logger.error(f"Error sending Telegram notification: {e}")
            return False
    
    def _format_payment_message(self, payment):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ"""
        amount = payment.amount
        service_name = payment.service_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        customer_fio = payment.customer_fio or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        payment_id = payment.id
        
        message = f"""
üí≥ *–ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂!*

üí∞ *–°—É–º–º–∞:* {amount} ‚ÇΩ
üè¢ *–£—Å–ª—É–≥–∞:* {service_name}
üë§ *–ü–ª–∞—Ç–µ–ª—å—â–∏–∫:* {customer_fio}
üÜî *ID –ø–ª–∞—Ç–µ–∂–∞:* `{payment_id}`
üìÖ *–í—Ä–µ–º—è:* {payment.paid_at.strftime('%d.%m.%Y %H:%M')}

‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        """.strip()
        
        return message
    
    def _send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = requests.post(
                self.api_url,
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("Telegram notification sent successfully")
                return True
            else:
                response_data = safe_json_response(response, {})
                error_description = response_data.get('description', 'Unknown error') if response_data else '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç'
                logger.error(f"Telegram API error: {response.status_code} - {error_description}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                if response.status_code == 400:
                    if "chat not found" in error_description.lower():
                        logger.error("Chat not found. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_LOG_CHAT_ID")
                    elif "bot was blocked" in error_description.lower():
                        logger.error("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    elif "can't parse entities" in error_description.lower():
                        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
                elif response.status_code == 403:
                    if "bot was blocked" in error_description.lower():
                        logger.error("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    elif "group chat was upgraded" in error_description.lower():
                        logger.error("–ß–∞—Ç –±—ã–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É")
                
                return False
                
        except requests.RequestException as e:
            logger.error(f"Request error sending Telegram notification: {e}")
            return False
    
    def get_bot_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        if not self.bot_token:
            return False, "Bot token not configured"
        
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                bot_info = safe_json_response(response)
                if bot_info:
                    return True, bot_info
                else:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Telegram API"
            else:
                return False, f"API error: {response.status_code} - {response.text}"
                
        except Exception as e:
            return False, f"Request error: {e}"
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
        if not self.bot_token or not self.chat_id:
            return False, "Bot token or chat_id not configured"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_ok, bot_info = self.get_bot_info()
        if not bot_ok:
            return False, f"Bot info error: {bot_info}"
        
        # –ó–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
            success = self._send_message(test_message)
            if success:
                return True, f"Test message sent successfully. Bot: @{bot_info['result']['username']}"
            else:
                return False, "Failed to send test message"
        except Exception as e:
            return False, f"Test failed: {e}"
