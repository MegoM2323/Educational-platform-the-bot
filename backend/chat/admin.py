from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import ChatRoom, Message, MessageRead, ChatParticipant


class MessageInline(admin.TabularInline):
    model = Message
    extra = 0
    readonly_fields = ['sender', 'created_at']
    fields = ['sender', 'content', 'message_type', 'created_at']


class ChatParticipantInline(admin.TabularInline):
    model = ChatParticipant
    extra = 0
    readonly_fields = ['joined_at']
    fields = ['user', 'is_admin', 'is_muted', 'joined_at', 'last_read_at']


@admin.register(ChatRoom)
class ChatRoomAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —á–∞—Ç-–∫–æ–º–Ω–∞—Ç
    """
    list_display = [
        'name', 'type_badge', 'created_by', 'participants_count', 
        'messages_count', 'is_active_badge', 'created_at'
    ]
    list_filter = ['type', 'is_active', 'created_at']
    search_fields = ['name', 'description', 'created_by__username']
    readonly_fields = ['created_at', 'updated_at']
    filter_horizontal = ['participants']
    inlines = [ChatParticipantInline, MessageInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'type', 'created_by')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_active',)
        }),
        ('–£—á–∞—Å—Ç–Ω–∏–∫–∏', {
            'fields': ('participants',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def type_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø —á–∞—Ç–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            ChatRoom.Type.DIRECT: 'blue',
            ChatRoom.Type.GROUP: 'green',
            ChatRoom.Type.SUPPORT: 'orange',
            ChatRoom.Type.CLASS: 'purple'
        }
        
        emojis = {
            ChatRoom.Type.DIRECT: 'üí¨',
            ChatRoom.Type.GROUP: 'üë•',
            ChatRoom.Type.SUPPORT: 'üÜò',
            ChatRoom.Type.CLASS: 'üéì'
        }
        
        color = colors.get(obj.type, 'gray')
        emoji = emojis.get(obj.type, 'üí¨')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_type_display()}"
        )
    type_badge.short_description = '–¢–∏–ø'
    
    def participants_count(self, obj):
        count = obj.participants.count()
        return format_html(
            '<span style="background-color: blue; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üë• {}</span>',
            count
        )
    participants_count.short_description = '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
    
    def messages_count(self, obj):
        count = obj.messages.count()
        return format_html(
            '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üí¨ {}</span>',
            count
        )
    messages_count.short_description = '–°–æ–æ–±—â–µ–Ω–∏–π'
    
    def is_active_badge(self, obj):
        if obj.is_active:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>'
            )
    is_active_badge.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(Message)
class MessageAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    list_display = [
        'room', 'sender', 'content_short', 'message_type_badge', 
        'is_edited_badge', 'created_at'
    ]
    list_filter = ['message_type', 'is_edited', 'created_at', 'room__type']
    search_fields = ['content', 'sender__username', 'room__name']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('room', 'sender', 'content', 'message_type')
        }),
        ('–§–∞–π–ª—ã', {
            'fields': ('file', 'image'),
            'classes': ('collapse',)
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('reply_to', 'is_edited'),
            'classes': ('collapse',)
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def content_short(self, obj):
        return obj.content[:50] + "..." if len(obj.content) > 50 else obj.content
    content_short.short_description = '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'
    
    def message_type_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            Message.Type.TEXT: 'blue',
            Message.Type.IMAGE: 'green',
            Message.Type.FILE: 'orange',
            Message.Type.SYSTEM: 'gray'
        }
        
        emojis = {
            Message.Type.TEXT: 'üí¨',
            Message.Type.IMAGE: 'üñºÔ∏è',
            Message.Type.FILE: 'üìé',
            Message.Type.SYSTEM: '‚öôÔ∏è'
        }
        
        color = colors.get(obj.message_type, 'gray')
        emoji = emojis.get(obj.message_type, 'üí¨')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_message_type_display()}"
        )
    message_type_badge.short_description = '–¢–∏–ø'
    
    def is_edited_badge(self, obj):
        if obj.is_edited:
            return format_html(
                '<span style="background-color: orange; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ</span>'
            )
        return "‚Äî"
    is_edited_badge.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(MessageRead)
class MessageReadAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    list_display = ['message', 'user', 'read_at']
    list_filter = ['read_at', 'message__room__type']
    search_fields = ['message__content', 'user__username']
    readonly_fields = ['read_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('message', 'user')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('read_at',)
        }),
    )


@admin.register(ChatParticipant)
class ChatParticipantAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    """
    list_display = [
        'room', 'user', 'is_admin_badge', 'is_muted_badge', 
        'joined_at', 'unread_count_display'
    ]
    list_filter = ['is_admin', 'is_muted', 'joined_at', 'room__type']
    search_fields = ['room__name', 'user__username']
    readonly_fields = ['joined_at', 'unread_count_display']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('room', 'user')
        }),
        ('–ü—Ä–∞–≤–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_admin', 'is_muted')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('joined_at', 'last_read_at')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('unread_count_display',)
        }),
    )
    
    def is_admin_badge(self, obj):
        if obj.is_admin:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üëë –ê–¥–º–∏–Ω</span>'
            )
        return "‚Äî"
    is_admin_badge.short_description = '–†–æ–ª—å'
    
    def is_muted_badge(self, obj):
        if obj.is_muted:
            return format_html(
                '<span style="background-color: orange; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üîá –ó–∞–≥–ª—É—à–µ–Ω</span>'
            )
        return "‚Äî"
    is_muted_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def unread_count_display(self, obj):
        count = obj.unread_count
        if count > 0:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üì¨ {}</span>',
                count
            )
        return format_html(
            '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ</span>'
        )
    unread_count_display.short_description = '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö'