import logging
from typing import Any, Dict, Optional

from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.conf import settings
import requests

from .models import Notification, NotificationSettings


logger = logging.getLogger(__name__)
User = get_user_model()


class NotificationService:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
    - –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å Notification
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç in-app (WebSocket) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É `notifications_{user_id}`
    - –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NotificationSettings –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
    - –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è email/SMS/Telegram –∫–∞–Ω–∞–ª–æ–≤
    """

    def __init__(self) -> None:
        self.channel_layer = get_channel_layer()

    def _is_allowed_by_settings(self, user: User, notif_type: str) -> bool:
        try:
            settings = getattr(user, 'notification_settings', None)
            if settings is None:
                return True
            if notif_type in (
                Notification.Type.ASSIGNMENT_NEW,
                Notification.Type.ASSIGNMENT_DUE,
                Notification.Type.ASSIGNMENT_GRADED,
                Notification.Type.HOMEWORK_SUBMITTED,
            ):
                return settings.assignment_notifications
            if notif_type in (
                Notification.Type.MATERIAL_NEW,
                Notification.Type.MATERIAL_PUBLISHED,
            ):
                return settings.material_notifications
            if notif_type in (
                Notification.Type.PAYMENT_SUCCESS,
                Notification.Type.PAYMENT_FAILED,
                Notification.Type.PAYMENT_PROCESSED,
            ):
                return settings.payment_notifications
            if notif_type == Notification.Type.REPORT_READY:
                return settings.report_notifications
            if notif_type == Notification.Type.MESSAGE_NEW:
                return settings.message_notifications
            return settings.system_notifications
        except Exception:
            return True

    def _ws_send(self, user_id: int, payload: Dict[str, Any]) -> None:
        if not self.channel_layer:
            return
        group_name = f"notifications_{user_id}"
        try:
            async_to_sync(self.channel_layer.group_send)(
                group_name,
                {
                    'type': 'notification',
                    'data': payload,
                },
            )
        except Exception as e:
            logger.error(f"WS send failed for user {user_id}: {e}")

    def _telegram_send(self, text: str) -> None:
        try:
            if not getattr(settings, 'TELEGRAM_BOT_TOKEN', None):
                return
            chat_id = getattr(settings, 'TELEGRAM_CHAT_ID', None)
            if not chat_id:
                return
            base_url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True,
            }
            requests.post(base_url, data=data, timeout=5)
        except Exception as e:
            logger.warning(f"Telegram send skipped: {e}")

    def send(self,
             recipient: User,
             notif_type: str,
             title: str,
             message: str,
             priority: str = Notification.Priority.NORMAL,
             related_object_type: str = '',
             related_object_id: Optional[int] = None,
             data: Optional[Dict[str, Any]] = None) -> Notification:
        if not self._is_allowed_by_settings(recipient, notif_type):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            notification = Notification.objects.create(
                recipient=recipient,
                type=notif_type,
                title=title,
                message=message,
                priority=priority,
                related_object_type=related_object_type,
                related_object_id=related_object_id,
                data=data or {},
                is_sent=False,
            )
            return notification

        notification = Notification.objects.create(
            recipient=recipient,
            type=notif_type,
            title=title,
            message=message,
            priority=priority,
            related_object_type=related_object_type,
            related_object_id=related_object_id,
            data=data or {},
            is_sent=True,
            sent_at=timezone.now(),
        )

        payload = {
            'id': notification.id,
            'type': notif_type,
            'title': title,
            'message': message,
            'priority': priority,
            'related_object_type': related_object_type,
            'related_object_id': related_object_id,
            'data': data or {},
            'created_at': notification.created_at.isoformat(),
        }
        self._ws_send(recipient.id, payload)

        # optional Telegram broadcast for critical events
        if getattr(settings, 'TELEGRAM_NOTIFICATIONS_ENABLED', False):
            try:
                self._telegram_send(f"üîî <b>{title}</b>\n{message}")
            except Exception:
                pass
        return notification

    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥ Requirements 7.x
    def notify_student_created(self, tutor: User, student: User) -> Notification:
        title = "–£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω"
        message = f"–£—á–µ–Ω–∏–∫ {student.get_full_name() or student.username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
        return self.send(
            recipient=tutor,
            notif_type=Notification.Type.STUDENT_CREATED,
            title=title,
            message=message,
            data={'student_id': student.id},
        )

    def notify_subject_assigned(self, student: User, subject_id: int, teacher: User) -> Notification:
        title = "–ù–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç"
        message = f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.get_full_name() or teacher.username}."
        return self.send(
            recipient=student,
            notif_type=Notification.Type.SUBJECT_ASSIGNED,
            title=title,
            message=message,
            data={'subject_id': subject_id, 'teacher_id': teacher.id},
        )

    def notify_material_published(self, student: User, material_id: int, subject_id: int) -> Notification:
        title = "–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
        message = "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É."
        return self.send(
            recipient=student,
            notif_type=Notification.Type.MATERIAL_PUBLISHED,
            title=title,
            message=message,
            data={'material_id': material_id, 'subject_id': subject_id},
        )

    def notify_homework_submitted(self, teacher: User, submission_id: int, student: User) -> Notification:
        title = "–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
        message = f"–°—Ç—É–¥–µ–Ω—Ç {student.get_full_name() or student.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ."
        return self.send(
            recipient=teacher,
            notif_type=Notification.Type.HOMEWORK_SUBMITTED,
            title=title,
            message=message,
            data={'submission_id': submission_id, 'student_id': student.id},
        )

    def notify_payment_processed(self, parent: User, status: str, amount: str, enrollment_id: int) -> Notification:
        title = "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω"
        status_text = "—É—Å–ø–µ—à–Ω–æ" if status == "success" else "–Ω–µ –ø—Ä–æ—à–µ–ª"
        message = f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {status_text}."
        notif_type = Notification.Type.PAYMENT_SUCCESS if status == 'success' else Notification.Type.PAYMENT_FAILED
        return self.send(
            recipient=parent,
            notif_type=notif_type,
            title=title,
            message=message,
            data={'enrollment_id': enrollment_id, 'status': status, 'amount': amount},
        )


