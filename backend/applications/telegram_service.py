import requests
import logging
from django.conf import settings
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)


class TelegramService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
    """
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        self.chat_id = settings.TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def send_message(self, text: str, parse_mode: str = "HTML") -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∫–∞–Ω–∞–ª
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Telegram API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.bot_token or not self.chat_id:
            logger.error("Telegram bot token –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return None
        
        url = f"{self.base_url}/sendMessage"
        
        data = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            if result.get('ok'):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram. Message ID: {result['result']['message_id']}")
                return result
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return None
    
    def send_application_notification(self, application) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ Telegram
        
        Args:
            application: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ Application
            
        Returns:
            Message ID –∏–∑ Telegram –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_application_message(application)
        
        result = self.send_message(message)
        if result and result.get('ok'):
            return str(result['result']['message_id'])
        return None
    
    def _format_application_message(self, application) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            application: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ Application
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"""
üéì <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ</b>

üë§ <b>–£—á–µ–Ω–∏–∫:</b> {application.student_name}
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–†–æ–¥–∏—Ç–µ–ª—å:</b> {application.parent_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {application.phone}
üìß <b>Email:</b> {application.email}
üéØ <b>–ö–ª–∞—Å—Å:</b> {application.grade}
        
üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {application.created_at.strftime('%d.%m.%Y –≤ %H:%M')}
"""
        
        if application.goal:
            message += f"\nüéØ <b>–¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è:</b> {application.goal}"
        
        if application.message:
            message += f"\nüí¨ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{application.message}"
        
        message += f"\n\nüÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{application.id}"
        
        return message
    
    def send_status_update(self, application, old_status: str, new_status: str) -> Optional[str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        
        Args:
            application: –û–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ Application
            old_status: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            
        Returns:
            Message ID –∏–∑ Telegram –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        status_emojis = {
            'new': 'üÜï',
            'processing': '‚è≥',
            'approved': '‚úÖ',
            'rejected': '‚ùå',
            'completed': 'üéâ'
        }
        
        status_names = {
            'new': '–ù–æ–≤–∞—è',
            'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
        emoji = status_emojis.get(new_status, 'üìù')
        status_name = status_names.get(new_status, new_status)
        
        message = f"""
{emoji} <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏</b>

üë§ <b>–£—á–µ–Ω–∏–∫:</b> {application.student_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {application.phone}
üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{application.id}

üìä <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:</b> {status_name}
‚è∞ <b>–í—Ä–µ–º—è:</b> {application.updated_at.strftime('%d.%m.%Y –≤ %H:%M')}
"""
        
        if application.notes:
            message += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> {application.notes}"
        
        return self.send_message(message)
    
    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.bot_token:
            logger.error("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        url = f"{self.base_url}/getMe"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            result = response.json()
            if result.get('ok'):
                bot_info = result['result']
                logger.info(f"Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'Unknown')}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService()
