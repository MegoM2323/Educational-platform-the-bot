from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import Subject, Material, MaterialProgress, MaterialComment


@admin.register(Subject)
class SubjectAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    """
    list_display = ['name', 'color_display', 'materials_count', 'description_short']
    search_fields = ['name', 'description']
    readonly_fields = ['materials_count']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'color')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('materials_count',)
        }),
    )
    
    def color_display(self, obj):
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üé® {}</span>',
            obj.color,
            obj.color
        )
    color_display.short_description = '–¶–≤–µ—Ç'
    
    def materials_count(self, obj):
        count = obj.materials.count()
        return format_html(
            '<span style="background-color: blue; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üìö {}</span>',
            count
        )
    materials_count.short_description = '–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'
    
    def description_short(self, obj):
        return obj.description[:50] + "..." if len(obj.description) > 50 else obj.description
    description_short.short_description = '–û–ø–∏—Å–∞–Ω–∏–µ'


class MaterialProgressInline(admin.TabularInline):
    model = MaterialProgress
    extra = 0
    readonly_fields = ['started_at', 'completed_at', 'last_accessed']


class MaterialCommentInline(admin.TabularInline):
    model = MaterialComment
    extra = 0
    readonly_fields = ['created_at', 'updated_at']


@admin.register(Material)
class MaterialAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    """
    list_display = [
        'title', 'author', 'subject', 'type_badge', 'status_badge', 
        'difficulty_level', 'is_public_badge', 'progress_count'
    ]
    list_filter = ['type', 'status', 'difficulty_level', 'is_public', 'subject', 'created_at']
    search_fields = ['title', 'description', 'author__username', 'tags']
    readonly_fields = ['created_at', 'updated_at', 'published_at']
    filter_horizontal = ['assigned_to']
    inlines = [MaterialProgressInline, MaterialCommentInline]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'description', 'content', 'author', 'subject')
        }),
        ('–¢–∏–ø –∏ —Å—Ç–∞—Ç—É—Å', {
            'fields': ('type', 'status', 'difficulty_level')
        }),
        ('–§–∞–π–ª—ã –∏ —Å—Å—ã–ª–∫–∏', {
            'fields': ('file', 'video_url'),
            'classes': ('collapse',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞', {
            'fields': ('is_public', 'assigned_to', 'tags')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at', 'published_at'),
            'classes': ('collapse',)
        }),
    )
    
    def type_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            Material.Type.LESSON: 'blue',
            Material.Type.PRESENTATION: 'green',
            Material.Type.VIDEO: 'red',
            Material.Type.DOCUMENT: 'orange',
            Material.Type.TEST: 'purple',
            Material.Type.HOMEWORK: 'brown'
        }
        
        emojis = {
            Material.Type.LESSON: 'üìñ',
            Material.Type.PRESENTATION: 'üìä',
            Material.Type.VIDEO: 'üé•',
            Material.Type.DOCUMENT: 'üìÑ',
            Material.Type.TEST: 'üìù',
            Material.Type.HOMEWORK: 'üìö'
        }
        
        color = colors.get(obj.type, 'gray')
        emoji = emojis.get(obj.type, 'üìñ')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_type_display()}"
        )
    type_badge.short_description = '–¢–∏–ø'
    
    def status_badge(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –±–µ–π–¥–∂–µ–º
        """
        colors = {
            Material.Status.DRAFT: 'gray',
            Material.Status.ACTIVE: 'green',
            Material.Status.ARCHIVED: 'red'
        }
        
        emojis = {
            Material.Status.DRAFT: 'üìù',
            Material.Status.ACTIVE: '‚úÖ',
            Material.Status.ARCHIVED: 'üì¶'
        }
        
        color = colors.get(obj.status, 'gray')
        emoji = emojis.get(obj.status, 'üìù')
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">{}</span>',
            color,
            f"{emoji} {obj.get_status_display()}"
        )
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def is_public_badge(self, obj):
        if obj.is_public:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üåê –ü—É–±–ª–∏—á–Ω—ã–π</span>'
            )
        else:
            return format_html(
                '<span style="background-color: red; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π</span>'
            )
    is_public_badge.short_description = '–î–æ—Å—Ç—É–ø'
    
    def progress_count(self, obj):
        count = obj.progress.count()
        completed = obj.progress.filter(is_completed=True).count()
        return format_html(
            '<span style="background-color: blue; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üìä {}/{}</span>',
            completed,
            count
        )
    progress_count.short_description = '–ü—Ä–æ–≥—Ä–µ—Å—Å'


@admin.register(MaterialProgress)
class MaterialProgressAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    """
    list_display = [
        'student', 'material', 'progress_percentage_display', 
        'is_completed_badge', 'time_spent', 'last_accessed'
    ]
    list_filter = ['is_completed', 'material__subject', 'material__type', 'started_at']
    search_fields = ['student__username', 'material__title']
    readonly_fields = ['started_at', 'completed_at', 'last_accessed']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('student', 'material')
        }),
        ('–ü—Ä–æ–≥—Ä–µ—Å—Å', {
            'fields': ('is_completed', 'progress_percentage', 'time_spent')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('started_at', 'completed_at', 'last_accessed'),
            'classes': ('collapse',)
        }),
    )
    
    def progress_percentage_display(self, obj):
        color = 'green' if obj.progress_percentage >= 80 else 'orange' if obj.progress_percentage >= 50 else 'red'
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}%</span>',
            color,
            obj.progress_percentage
        )
    progress_percentage_display.short_description = '–ü—Ä–æ–≥—Ä–µ—Å—Å'
    
    def is_completed_badge(self, obj):
        if obj.is_completed:
            return format_html(
                '<span style="background-color: green; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background-color: orange; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ</span>'
            )
    is_completed_badge.short_description = '–°—Ç–∞—Ç—É—Å'


@admin.register(MaterialComment)
class MaterialCommentAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
    """
    list_display = [
        'material', 'author', 'content_short', 'is_question_badge', 'created_at'
    ]
    list_filter = ['is_question', 'created_at', 'material__subject']
    search_fields = ['content', 'author__username', 'material__title']
    readonly_fields = ['created_at', 'updated_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('material', 'author', 'content', 'is_question')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def content_short(self, obj):
        return obj.content[:50] + "..." if len(obj.content) > 50 else obj.content
    content_short.short_description = '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ'
    
    def is_question_badge(self, obj):
        if obj.is_question:
            return format_html(
                '<span style="background-color: orange; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">‚ùì –í–æ–ø—Ä–æ—Å</span>'
            )
        else:
            return format_html(
                '<span style="background-color: blue; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px;">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</span>'
            )
    is_question_badge.short_description = '–¢–∏–ø'