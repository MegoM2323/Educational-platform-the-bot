import requests
import logging
from django.conf import settings
from typing import Optional, Dict, Any
from .models import Application
from core.json_utils import safe_json_response

logger = logging.getLogger(__name__)


class TelegramNotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫
    """
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN

    def _get_base_url(self) -> str:
        """Build base URL using current bot token (token might be patched in tests)."""
        return f"https://api.telegram.org/bot{self.bot_token}"
    
    def send_credentials(self, telegram_id: str, username: str, password: str, role: str, 
                        child_name: str = None) -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (student, teacher, parent)
            child_name: –ò–º—è —Ä–µ–±–µ–Ω–∫–∞ (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Telegram API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not telegram_id:
            logger.error("Telegram telegram_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        message = self._format_credentials_message(username, password, role, child_name)
        return self._send_message(telegram_id, message)
    
    def send_parent_link(self, telegram_id: str, parent_username: str, parent_password: str, 
                        child_name: str) -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–±–µ–Ω–∫–µ
        
        Args:
            telegram_id: ID —Ä–æ–¥–∏—Ç–µ–ª—è –≤ Telegram
            parent_username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
            parent_password: –ü–∞—Ä–æ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è
            child_name: –ò–º—è —Ä–µ–±–µ–Ω–∫–∞
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Telegram API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not telegram_id:
            logger.error("Telegram telegram_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        message = self._format_parent_credentials_message(
            parent_username, parent_password, child_name
        )
        return self._send_message(telegram_id, message)
    
    def send_application_status(self, telegram_id: str, status: str, 
                               details: str = None) -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏
        
        Args:
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            status: –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ (approved, rejected)
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Telegram API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not telegram_id:
            logger.error("Telegram telegram_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        message = self._format_status_message(status, details)
        return self._send_message(telegram_id, message)
    
    def _send_message(self, chat_id: str, text: str, parse_mode: str = "HTML") -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
            
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Telegram API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        url = f"{self._get_base_url()}/sendMessage"
        
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            
            result = safe_json_response(response)
            if result and result.get('ok'):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram. Chat ID: {chat_id}, Message ID: {result['result']['message_id']}")
                return result
            else:
                error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç'
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_msg}")
                return None
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return None
    
    def _format_credentials_message(self, username: str, password: str, role: str, 
                                   child_name: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            child_name: –ò–º—è —Ä–µ–±–µ–Ω–∫–∞ (–¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        role_names = {
            'student': '–°—Ç—É–¥–µ–Ω—Ç',
            'teacher': '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
            'parent': '–†–æ–¥–∏—Ç–µ–ª—å',
            'tutor': '–¢—å—é—Ç–æ—Ä'
        }
        
        role_emojis = {
            'student': 'üéì',
            'teacher': 'üë®‚Äçüè´',
            'parent': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            'tutor': 'üéØ'
        }
        
        emoji = role_emojis.get(role, 'üë§')
        role_display = role_names.get(role, role)
        
        message = f"""
{emoji} <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!</b>

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.

<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</b>
üë§ <b>–õ–æ–≥–∏–Ω:</b> <code>{username}</code>
üîê <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>
üé≠ <b>–†–æ–ª—å:</b> {role_display}
"""
        
        if child_name and role == 'parent':
            message += f"\nüë∂ <b>–†–µ–±–µ–Ω–æ–∫:</b> {child_name}"
        
        message += f"""

üåê <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b> https://your-platform.com/login

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞

üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.
"""
        
        return message
    
    def _format_parent_credentials_message(self, parent_username: str, parent_password: str, 
                                         child_name: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            parent_username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
            parent_password: –ü–∞—Ä–æ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è
            child_name: –ò–º—è —Ä–µ–±–µ–Ω–∫–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"""
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!</b>

üéâ –î–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ <b>{child_name}</b> —Å–æ–∑–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞, –∞ –¥–ª—è –≤–∞—Å - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏.

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</b>
üë§ <b>–õ–æ–≥–∏–Ω:</b> <code>{parent_username}</code>
üîê <b>–ü–∞—Ä–æ–ª—å:</b> <code>{parent_password}</code>
üé≠ <b>–†–æ–ª—å:</b> –†–æ–¥–∏—Ç–µ–ª—å

üë∂ <b>–†–µ–±–µ–Ω–æ–∫:</b> {child_name}

üåê <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:</b> https://your-platform.com/login

<b>–í —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ:</b>
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Ä–µ–±–µ–Ω–∫–∞
üí≥ –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∑–∞ –æ–±—É—á–µ–Ω–∏–µ
üìà –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç—á–µ—Ç—ã
üìù –ü–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞

üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ.
"""
        
        return message
    
    def _format_status_message(self, status: str, details: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if status == Application.Status.APPROVED:
            message = """
‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.
–í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
"""
        elif status == Application.Status.REJECTED:
            message = """
‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.
"""
        else:
            message = f"""
üìã <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω</b>

–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status}
"""
        
        if details:
            message += f"\n\nüìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{details}"
        
        message += "\n\nüìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
        
        return message
    
    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.bot_token:
            logger.error("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        url = f"{self._get_base_url()}/getMe"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            result = safe_json_response(response)
            if result and result.get('ok'):
                bot_info = result['result']
                logger.info(f"Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'Unknown')}")
                return True
            else:
                error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç'
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {error_msg}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram –±–æ—Ç–∞: {e}")
            return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_notification_service = TelegramNotificationService()